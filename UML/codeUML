@startuml
class zoot.exceptions.AnalyseLexicaleException {
}
class zoot.tableDesSymboles.TDS {
- {static} TDS instance
+ {static} TDS getInstance()
+ void ajouter(String,Symbole)
+ Symbole identifier(String)
+ int getTailleZoneVariables()
}
class zoot.exceptions.DoubleDeclarationException {
}
class zoot.arbre.BlocDInstructions {
+ void ajouter(ArbreAbstrait)
+ void verifier()
+ String toMIPS()
+ String toString()
}
class zoot.exceptions.AnalyseLexicaleSemantique {
}
abstract class zoot.arbre.instructions.Instruction {
}
class zoot.arbre.expressions.ConstanteEntiere {
+ String toMIPS()
+ String getType()
}
class zoot.exceptions.AnalyseSyntaxiqueException {
}
class zoot.arbre.instructions.Affect {
+ void verifier()
+ String toMIPS()
}
abstract class zoot.arbre.expressions.Expression {
+ {abstract}String getType()
+ {abstract}boolean estUneVariable()
}
class zoot.exceptions.VariableNonDeclareeException {
}
class zoot.arbre.instructions.Ecrire {
+ void verifier()
+ String toMIPS()
}
class zoot.gestionErreurs.Erreur {
- String message
- int numLigne
- int numCarac
+ String getMessage()
+ void setMessage(String)
+ int getNumLigne()
+ void setNumLigne(int)
+ int getNumCarac()
+ void setNumCarac(int)
}
class zoot.arbre.expressions.Idf {
- String nom
- int depl
+ void verifier()
+ String toMIPS()
+ String getType()
+ String toString()
+ boolean estUneVariable()
}
abstract class zoot.arbre.expressions.Constante {
# String cste
+ void verifier()
+ String toString()
+ boolean estUneVariable()
}
class zoot.Zoot {
+ {static} void main(String[])
}
abstract class zoot.arbre.ArbreAbstrait {
# int noLigne
+ int getNoLigne()
+ {abstract}void verifier()
+ {abstract}String toMIPS()
}
class zoot.arbre.expressions.ConstanteBooleenne {
+ String toMIPS()
+ String getType()
}
class zoot.gestionErreurs.StockageErreurs {
- {static} StockageErreurs instance
+ {static} StockageErreurs getInstance()
+ void ajouter(Erreur)
+ Erreur getErreurI(int)
+ int getNbErreurs()
+ ArrayList<Erreur> getListeErreurs()
}
class zoot.tableDesSymboles.Symbole {
- String type
- int deplacement
+ String getType()
+ void setType(String)
+ int getDeplacement()
+ void setDeplacement(int)
}
abstract class zoot.exceptions.AnalyseException {
}

zoot.gestionErreurs.StockageErreurs -- "*" zoot.gestionErreurs.Erreur
zoot.arbre.instructions.Ecrire -- "1" zoot.arbre.expressions.Expression
zoot.arbre.instructions.Affect -- "1" zoot.arbre.expressions.Expression
zoot.arbre.instructions.Affect -- "1" zoot.arbre.expressions.Idf
zoot.tableDesSymboles.TDS -- "*" zoot.tableDesSymboles.Symbole
zoot.arbre.BlocDInstructions -- "*" zoot.arbre.ArbreAbstrait
zoot.exceptions.AnalyseException <|-- zoot.exceptions.AnalyseLexicaleException
zoot.exceptions.AnalyseLexicaleSemantique <|-- zoot.exceptions.DoubleDeclarationException
zoot.arbre.ArbreAbstrait <|-- zoot.arbre.BlocDInstructions
zoot.exceptions.AnalyseException <|-- zoot.exceptions.AnalyseLexicaleSemantique
zoot.arbre.ArbreAbstrait <|-- zoot.arbre.instructions.Instruction
zoot.arbre.expressions.Constante <|-- zoot.arbre.expressions.ConstanteEntiere
zoot.exceptions.AnalyseException <|-- zoot.exceptions.AnalyseSyntaxiqueException
zoot.arbre.instructions.Instruction <|-- zoot.arbre.instructions.Affect
zoot.arbre.ArbreAbstrait <|-- zoot.arbre.expressions.Expression
zoot.exceptions.AnalyseLexicaleSemantique <|-- zoot.exceptions.VariableNonDeclareeException
zoot.arbre.instructions.Instruction <|-- zoot.arbre.instructions.Ecrire
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.Idf
zoot.arbre.expressions.Expression <|-- zoot.arbre.expressions.Constante
zoot.arbre.expressions.Constante <|-- zoot.arbre.expressions.ConstanteBooleenne
zoot.exceptions.RuntimeException <|-- zoot.exceptions.AnalyseException
@enduml